AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # from other substacks
  BasicLambdaRoleArn:
    Type: String

  SecurityGroupId:
    Type: String

  PrivateSubnetA:
    Type: String

  PrivateSubnetB:
    Type: String

  PublicSubnetA:
    Type: String

  PublicSubnetB:
    Type: String

  SrcBucket:
    Type: String
    Default: eecs6895-fraud-detection-repo

  ProjectName:
    Type: String
    Default: fraud-detection




Resources:
  KafkaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
      LayerName: kafka-layer
      Content: ../src/layers/kafka-layer.zip

  RedisLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
      LayerName: redis-layer
      Content: ../src/layers/redis-layer.zip

  ConstantLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
      LayerName: fraud-detection-constant-layer
      Content: ../src/constants/constant-layer.zip

#  SagemakerLayer:
#    Type: AWS::Lambda::LayerVersion
#    Properties:
#      CompatibleRuntimes:
#        - python3.6
#        - python3.7
#        - python3.8
#      LayerName: sagemaker-layer
#      Content: ../src/layers/aws-sagemaker-layer.zip

  ApprovalRequest:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-approval-request
      Runtime: python3.8
      Code: ../src/approvalRequest/code.zip
      Role: !Ref BasicLambdaRoleArn
      Handler: handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
      Layers:
        - !Ref KafkaLayer
        - !Ref RedisLayer
        - !Ref ConstantLayer

  BatchWriter:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-batch-writer
      Runtime: python3.8
      Code: ../src/batchWriter/code.zip
      Role: !Ref BasicLambdaRoleArn
      Handler: handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Layers:
        - !Ref KafkaLayer
        - !Ref ConstantLayer

  CheckResult:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-check-result
      Runtime: python3.8
      Code: ../src/checkResult/code.zip
      Role: !Ref BasicLambdaRoleArn
      Handler: handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
      Layers:
        - !Ref RedisLayer
        - !Ref ConstantLayer

  Classifier:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-classifier
      Runtime: python3.8
      Code: ../src/classifier/code.zip
      Role: !Ref BasicLambdaRoleArn
      Handler: handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Layers:
        - !Ref KafkaLayer
        - !Ref ConstantLayer
        - !Ref RedisLayer

  VerifyTransaction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-verify-transaction
      Runtime: python3.8
      Code: ../src/verifyTransaction/code.zip
      Role: !Ref BasicLambdaRoleArn
      Handler: handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
      Layers:
        - !Ref RedisLayer
        - !Ref ConstantLayer

#  SageMakerDeployment:
#    Type: AWS::Lambda::Function
#    Properties:
#      FunctionName: !Sub ${ProjectName}-sagemaker-deployment
#      Runtime: python3.8
#      Code: ../src/sagemaker/code.zip
#      Role: !Ref BasicLambdaRoleArn
#      Handler: handler.handler
#      Layers:
#        - !Ref ConstantLayer
#        - !Ref SagemakerLayer

  # API gateway definition
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ProjectName}-api-gateway

  # resources
  ApprovalRequestPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: request

  ConfirmationPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: confirm

  # Endpoints
  ApprovalRequestOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApprovalRequestPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApprovalRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApprovalRequestPath
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApprovalRequest.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApprovalRequestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApprovalRequestPath
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckResult.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GatewayInvokePermission1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApprovalRequest
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/POST/request
        - __ApiId__: !Ref ApiGateway

  GatewayInvokePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CheckResult
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/GET/request
        - __ApiId__: !Ref ApiGateway


  # Endpoints
  ConfirmationOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ConfirmationPath
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ConfirmationPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ConfirmationPath
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyTransaction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GatewayInvokePermission3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VerifyTransaction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/POST/confirm
        - __ApiId__: !Ref ApiGateway